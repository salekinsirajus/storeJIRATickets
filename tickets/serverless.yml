service: tickets
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# setting the API endpoint to US-West(Oregon)
  stage: dev
  region: us-west-2

functions:
  list:
    handler: list.list
    events:
      - http:
          path: tickets
          method: get
          cors: true
  create:
    handler: create.create
    events:
      - http:
          path: tickets
          method: post
          cors: true
  get:
    handler: get.get
    events:
      - http:
          path: tickets/{id}
          method: get
          cors: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    ticketsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

